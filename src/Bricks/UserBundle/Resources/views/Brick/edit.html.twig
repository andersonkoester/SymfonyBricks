{% extends "BricksUserBundle::layout.html.twig" %}

{% import "BricksSiteBundle::macros/macrosInfo.html.twig" as macrosInfo %}

{% block main %}

    <div class="row">
        <div class="col-md-12">
            <form action="{{ (entity.isNew) ? path('user_brick_create') : path('user_brick_update', { 'id': entity.id }) }}" method="post" {{ form_enctype(form) }} id="user-brick-edit" class="form" novalidate>

                <p>
                    <div class="pull-right">
                    <button type="submit" class="btn btn-success">
                        <span class="glyphicon glyphicon-ok"></span> {{ 'save'|trans|capitalize }}
                    </button>
                    <a href="{{ path('user_brick') }}" class="btn">
                        <span class="glyphicon glyphicon-chevron-left"></span> {{ 'back_to_the_list'|trans|capitalize }}
                    </a>
                    </div>
                    
                    <h1>{{ (entity.isNew) ? 'brick.create_new_brick'|trans({}, 'UserBundle'): 'brick.edit_brick'|trans({}, 'UserBundle') }}</h1>
                </p>
                
                <br>


                {# BRICK TITLE #}
                <div class="form-group {{ (form_errors(form.title))?'has-error':'' }}">
                    <div class="control-label">
                        <strong>
                            {{ 'brick.title'|trans({}, 'UserBundle')|capitalize }}
                        </strong>

                        {# info modal #}
                        {{ macrosInfo.bootstrapInfoModal('brick.help.title.title'|trans({}, 'UserBundle'), 'brick.help.title.body'|trans({}, 'UserBundle')) }}
                    </div>
                    <div class="controls">
                        {{ form_widget(form.title, {'attr': {'class': 'form-control'}}) }}

                        {% if form_errors(form.title) %}
                            <div class="form-errors">
                                {{ form_errors(form.title) }}
                            </div>
                        {% endif %}
                    </div>
                </div>

                {# BRICK LICENSE #}
                <div class="form-group">
                    <div class="control-label">
                        <strong>
                            {{ 'brick.license'|trans({}, 'UserBundle')|capitalize }}
                        </strong>

                        {# info modal #}
                        {{ macrosInfo.bootstrapInfoModal('brick.help.license.title'|trans({}, 'UserBundle'), 'brick.help.license.body'|trans({}, 'UserBundle')) }}
                    </div>
                    <div class="controls">
                        <div id="license-wrapper">
                            {{ form_widget(form.brick_license, {'attr': {'class': 'form-control input-sm'}}) }}
                        </div>
                    </div>
                </div>
                
                {# BRICK TAGS #}
                <div class="form-group">
                    <div class="control-label">
                        <strong>
                            {{ 'brick.tags'|trans({}, 'UserBundle')|capitalize }}
                        </strong>

                        {# info modal #}
                        {{ macrosInfo.bootstrapInfoModal('brick.help.tags.title'|trans({}, 'UserBundle'), 'brick.help.tags.body'|trans({}, 'UserBundle')) }}
                    </div>
                    <div class="controls">
                    
                        <div id="tags-labels">
                            <div id="tags"></div>

                            <p class="help-text">
                                {{ 'brick.brickHasTags.help_text'|trans({}, 'UserBundle') }}
                            </p>

                            <input id="input-add-tag" class="tags-input" type="text" />
                        </div>
                        
                        {{ form_widget(form.brickHasTags) }}
                    </div>
                </div>
                
                {# BRICK DESCRIPTION #}
                <div class="form-group">
                    <div class="control-label">
                        <strong>
                            {{ 'brick.description'|trans({}, 'UserBundle')|capitalize }}
                        </strong>

                        {# info modal #}
                        {{ macrosInfo.bootstrapInfoModal('brick.help.description.title'|trans({}, 'UserBundle'), 'brick.help.description.body'|trans({}, 'UserBundle')) }}
                    </div>
                    <div class="controls">
                        {{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
                    </div>
                </div>
                
                {# BRICK CANONICAL URL #}
                <div class="form-group">
                    <div class="control-label">
                        <strong>
                            {{ 'brick.canonical_url'|trans({}, 'UserBundle')|capitalize }}
                        </strong>

                        {# info modal #}
                        {{ macrosInfo.bootstrapInfoModal('brick.help.canonical_url.title'|trans({}, 'UserBundle'), 'brick.help.canonical_url.body'|trans({}, 'UserBundle')) }}
                    </div>
                    <div class="controls">
                        {{ form_widget(form.canonical_url, {'attr': {'class': 'form-control'}}) }}
                    </div>
                </div>

                {# BRICK CONTENT #}
                <div id="form-group-content" class="form-group">
                    <div class="controls">
                        <ul class="nav nav-tabs" id="content-tab">
                            <li class="active">
                                <a href="#content-code" data-toggle="tab">
                                    <strong>
                                        {{ 'brick.content'|trans({}, 'UserBundle')|capitalize }}
                                    </strong>
                                </a>
                            </li>
                            <li>
                                <a href="#content-preview" data-toggle="tab">
                                    <strong>
                                        {{ 'brick.preview'|trans({}, 'UserBundle')|capitalize }}
                                    </strong>
                                </a>
                            </li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="content-code">
                                {{ form_widget(form.content, {'attr': {'class': 'form-control'}}) }}
                            </div>
                            <div class="tab-pane" id="content-preview"></div>
                        </div>
                    </div>
                </div>

                {# actions #}
                <div class="form-group">
                    <div class="controls">
                        <button type="submit" class="btn btn-success">
                            <span class="glyphicon glyphicon-ok"></span> {{ 'save'|trans|capitalize }}
                        </button>
                        <a href="{{ path('user_brick') }}" class="btn">
                            <span class="glyphicon glyphicon-chevron-left"></span> {{ 'back_to_the_list'|trans|capitalize }}
                        </a>
                    </div>
                </div>
                
                {{ form_rest(form) }}
                
            </form>
            
        </div>
    </div>

{% endblock %}

{% block javascripts_footer %}

    <script type="text/javascript">
        jQuery(function($) {
        	/****************************************************************************************
             * tabbed panes for Brick content/preview
             ***************************************************************************************/
            /**
             * preview the content of the brick by calling the markup parser via ajax
             */
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {

                // tab element pressed
                var tabCaller = $(e.target);

                // tab pane related
                var paneTarget = $(tabCaller.attr('href'));

                // if preview is requested
                if (tabCaller.attr('href') == '#content-preview') {

                    /**
                     * perform ajax call to preview content
                     */
                	$.ajax({
                	    url: "{{ path('_user_brick_renderMarkdown') }}",
                	    data: {
            	            'content': $('#content-code textarea').val()
        	            },
        	            type: 'POST',
        	            beforeSend: function(e) {
        	            	$('#content-preview').html('loading preview...');
                        },
        	            complete: function(e) {
        	            	$('#content-preview').html(e.responseText);

                            // highlight code
                            syntaxHighlight({
                                'container': $('#content-preview')
                            });
                        }
            		})
                }
            })

            /****************************************************************************************
             * Tag management
             ***************************************************************************************/
            /**
             * Javascript object for managing the tags
             *
             * options:
             *  - inputAddTag = jQuery element
             *  - onAddTag = function()
             *  - onRemoveTag = function()
             */
            function TagsManager(container, options) {
                /***********************************************************************
                 functions
                 ***********************************************************************/
                // initialize input to add a tag
                this.initInputAddTag = function() {
                    self.inputAddTag.keydown(function(event) {
                        if (event.which == '13') {
                            event.preventDefault();

                            var srcElement = $(event.srcElement);
                            var tagValue = srcElement.val();

                            srcElement.val("");

                            if (tagValue != '') {
                                self.addTag(tagValue);
                            }
                        }
                    });
                }

                /**
                 * Add an array of tags
                 */
                this.addTags = function(tags) {
                    for (i = 0; i < tags.length; i++) {
                        self.addTag(tags[i]);
                    }
                }

                /**
                 * Add a single tag
                 */
                this.addTag= function(tag) {

                    if (self.isTagAlreadyPresent(tag)) {
                        return false;
                    }

                    // html element to insert
                    var tagHtml =
                        $('<div class="tag" data-id="'+self.incrementalId+'" />').append(
                            tag,
                            $('<a href="javascript:void(0);" />').html(
                                $('<span class="glyphicon glyphicon-remove-sign" ></span>')
                            )
                        )
                    ;
                    self.container.append(tagHtml);

                    // click for removing a tag
                    tagHtml.find('span.glyphicon').click(function() {
                        self.removeTag(tagHtml.data('id'));
                    })

                    // add tag to internal array of tags
                    self.tags[self.incrementalId] = tag;

                    if (self.options.onAddTag != null) {
                        self.options.onAddTag(self.getTags());
                    }

                    // increment variable on each insert
                    self.incrementalId++;
                }

                this.isTagAlreadyPresent = function(tag) {
                    var result = $.grep(self.tags, function(value) {
                        return value == tag;
                    });

                    return result.length > 0;

                }

                /**
                 * Remove a single tag
                 */
                this.removeTag = function(id) {
                    self.container.find('.tag[data-id="'+id+'"]').remove();

                    // remove tag from internal array
                    delete self.tags[id];
                    //console.log(self.tags);

                    if (self.options.onRemoveTag != null) {
                        self.options.onRemoveTag(self.getTags());
                    }
                }

                /**
                 * Get all tags (array of strings
                 */
                this.getTags = function() {
                    var output = [];

                    for (property in self.tags) {
                        output.push(self.tags[property])
                    }

                    return output;
                }

                /***********************************************************************
                 logic
                 ***********************************************************************/

                var self = this;

                self.container = container;
                self.options = $.extend(options, {});

                // array of inserted tags
                self.tags = {};

                // increment on each insert
                self.incrementalId = 0;

                self.inputAddTag = options.inputAddTag;
                self.initInputAddTag();

                return self;
            }

            /**
             * updates the form.brickHasTags form field when user adds/removes tags
             * through the bootstrap plugin
             *
             * hack: everything is wrapped in a timeout function,
             * waiting for https://github.com/maxwells/bootstrap-tags/issues/2
             */
            updateBrickHasTagsInput = function(tags) {

                // wrap everything in a timeout function
                //setTimeout(function() {
                // form.brickHasTags form field
                var brickHasTagsInput = $("#{{ form.brickHasTags.vars.id }}");

                // set tags values to brick form input
                $("#{{ form.brickHasTags.vars.id }}").val(tags.join("|"));

                //console.log($("#{{ form.brickHasTags.vars.id }}").val());
            };

            // tags values for bootstrap plugin
            var tagData = [];
            {% if (entity.brickHasTags|length > 0) %}
                tagData = "{{ form.brickHasTags.vars.value }}".split('|');
            {% endif %}


            var tagsElement = $('#tags-labels #tags');
            var tagsManager = new TagsManager(tagsElement,  {
                'inputAddTag': $('#input-add-tag'),
                'onAddTag': function (tags) {
                    updateBrickHasTagsInput(tags);
                },
                'onRemoveTag': function (tags) {
                    updateBrickHasTagsInput(tags);
                }
            }).addTags(tagData);

        });
    </script>
    
{% endblock %}