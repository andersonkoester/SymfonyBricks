<?php

namespace Bricks\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BrickRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BrickRepository extends EntityRepository
{
    /**
     * search Bricks
     *
     * $params = array(
     *     'q' => string, search $params['q'] in Bricks' title
     *     'tag_name' => string, search Bricks having $params['tag_name'] as Tag
     * )
     *
     * @param array $params array of parameters
     * @return multitype:
     */
    public function search(array $params = array())
    {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder()
            ->select('e')
            ->from('BricksSiteBundle:Brick', 'e')
        ;

        /**
         * $params['q'] filter
         *
         * search in Brick.title field
         */
        if (array_key_exists('q', $params) && '' !== trim($params['q'])) {
            $qb->andWhere($qb->expr()->like('e.title', ':q'))
                ->setParameter('q', '%'.$params['q'].'%')
            ;
        }

        /**
         * $params['tag_slug'] filter
         *
         * search in Tag.slug field
         */
        if (array_key_exists('tag_name', $params) && '' !== trim($params['tag_name'])) {

            // find all brick ids matching a particular query
            $tagRepo = $em->getRepository('BricksSiteBundle:Tag');
            $ids = $tagRepo->getResourceIdsForTag('brick_tag', $params['tag_name']);

            if (count($ids) > 0) {
                $qb->add('where', $qb->expr()->in('e.id', $ids));
            } else {
                $qb->andWhere('e.id IS NULL');
            }
        }

        /**
         * $params['published'] filter
         */
        if (array_key_exists('published', $params)) {
            $qb->andWhere('e.published = :published')
                ->setParameter('published', $params['published'])
            ;
        }

        // order by title
        $qb->addOrderBy('e.title');

        return $qb->getQuery()->getResult();
    }

    /**
     * find published Bricks
     *
     * $options = array(
     *     'return_qb' => if true, reurn $qb object
     * )
     *
     * @param array $options array of parameters
     * @return multitype:
     */
    public function findPublished(array $options = array())
    {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder()
            ->select('e')
            ->from('BricksSiteBundle:Brick', 'e')
            ->where('e.published = :published')
            ->setParameter('published', true)
        ;

        // order by published_at field
        $qb->orderBy('e.publishedAt', 'DESC');

        /**
         * return $qb object
         */
        if (array_key_exists('return_qb', $options) && $options['return_qb'] == true) {
            return $qb;
        }

        return $qb->getQuery()->getResult();
    }
}
