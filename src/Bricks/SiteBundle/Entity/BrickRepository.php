<?php

namespace Bricks\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BrickRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BrickRepository extends EntityRepository
{
    /**
     * search Bricks
     * 
     * $params = array(
     *     'q' => string, search $params['q'] in Bricks' title
     *     'tag_slug' => string, search Bricks having $params['tag_slug'] as Tag (search Tag by $params['tag_slug'], exact matching)
     * )
     * 
     * @param array $params array of parameters
     * @return multitype:
     */
    public function search(array $params = array())
    {
        $em = $this->getEntityManager();
         
        $qb = $em->createQueryBuilder()
            ->select('e')
            ->from('BricksSiteBundle:Brick', 'e')
        ;
        
        /**
         * $params['q'] filter
         * 
         * search in Brick.title field
         */
        if (array_key_exists('q', $params) && '' !== trim($params['q'])) {
            $qb->andWhere($qb->expr()->like('e.title', ':q'))
                ->setParameter('q', '%'.$params['q'].'%')
            ;
        }
        
        /**
         * $params['tag_slug'] filter
         * 
         * search in Tag.slug field
         */
        if (array_key_exists('tag_slug', $params) && '' !== trim($params['tag_slug'])) {
            
            $qb->innerJoin('e.brickHasTags', 'bht')
                ->innerJoin('bht.tag', 't')
                
                ->andWhere('t.slug = :tag_slug')
                ->setParameter('tag_slug', $params['tag_slug'])
            ;
        }
        
        // order by title
        $qb->addOrderBy('e.title');
        
        return $qb->getQuery()->getResult();
    }
}
